// js/admin.js

const scriptURL = "https://api.sheetbest.com/sheets/67a68e64-dca9-4eea-99b7-0431c5786cf6";

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡∏¥‡∏ö
let orderRaw = [];

// ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown ‡πÇ‡∏ï‡πä‡∏∞
async function loadAdminOrders() {
  document.getElementById('admin-result').innerHTML = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";
  document.getElementById('admin-orders').innerHTML = "";
  const res = await fetch(scriptURL);
  const data = await res.json();
  orderRaw = data;

  // ‡∏´‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå unpaid+qty>0
  const tableMap = {};
  data.forEach(row => {
    if ((row.status ?? "unpaid") === "unpaid" && Number(row.qty) > 0) {
      tableMap[row.table] = true;
    }
  });
  const tables = Object.keys(tableMap).sort((a, b) => Number(a) - Number(b));
  const select = document.getElementById('select-table');
  select.innerHTML = '';
  tables.forEach(table => {
    select.innerHTML += `<option value="${table}">‡πÇ‡∏ï‡πä‡∏∞ ${table}</option>`;
  });

  if (!tables.length) {
    document.getElementById('admin-result').innerHTML = "üéâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô";
    document.getElementById('admin-orders').innerHTML = "";
    return;
  } else {
    document.getElementById('admin-result').innerHTML = "";
  }
  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏£‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  select.value = tables[0];
  renderOrderTable(tables[0]);
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ï‡πä‡∏∞
document.getElementById('select-table').onchange = function() {
  renderOrderTable(this.value);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏±‡πâ‡∏ô
function renderOrderTable(tableNum) {
  // ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢
  const orders = {};
  orderRaw.forEach(row => {
    if (String(row.table).trim() !== String(tableNum)) return;
    if ((row.status ?? "unpaid") !== "unpaid") return;
    if (!row.menu) return;
    if (!orders[row.menu]) {
      orders[row.menu] = {
        menu: row.menu,
        qty: 0,
        price: Number(row.price) || 0,
        note: row.note || "",
        ids: [],
      };
    }
    orders[row.menu].qty += Number(row.qty || 1);
    orders[row.menu].price = Number(row.price) || 0;
    orders[row.menu].note = row.note || "";
    orders[row.menu].ids.push(row._id || null);
  });
  // Filter ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà qty > 0
  const orderArr = Object.values(orders).filter(o => o.qty > 0);

  let html = "";
  if (!orderArr.length) {
    html = "<div style='color:#bbb'>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ</div>";
    document.getElementById('admin-orders').innerHTML = html;
    return;
  }

  html += `<table class="order-table"><tr>
      <th>‡πÄ‡∏°‡∏ô‡∏π</th>
      <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
      <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
      <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
      <th>‡∏•‡∏ö</th>
    </tr>`;

  let sum = 0;
  for (const o of orderArr) {
    sum += o.qty * o.price;
    html += `<tr>
      <td>${o.menu}</td>
      <td>
        <input class="input-qty" type="number" min="1" max="99" value="${o.qty}" 
          onchange="adminUpdateQty('${tableNum}','${o.menu.replace(/'/g,"\\'")}', this.value)">
      </td>
      <td>${o.price * o.qty} ‡∏ø</td>
      <td>${o.note || ''}</td>
      <td>
        <button class="order-action-btn delete-btn" onclick="adminDeleteOrder('${tableNum}','${o.menu.replace(/'/g,"\\'")}')">‡∏•‡∏ö</button>
      </td>
    </tr>`;
  }
  html += `<tr><td colspan="2" style="text-align:right;font-weight:bold;">‡∏£‡∏ß‡∏°</td><td style="font-weight:bold;">${sum} ‡∏ø</td><td colspan="2"></td></tr>`;
  html += `</table>`;
  html += `<button class="order-action-btn" onclick="adminCheckout('${tableNum}')">‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•</button>`;
  document.getElementById('admin-orders').innerHTML = html;
}

// Soft delete ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß qty ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
window.adminDeleteOrder = async function(table, menu) {
  if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${menu}" ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ${table} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?`)) return;
  // ‡∏´‡∏≤ qty ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  let qty = 0;
  orderRaw.forEach(row => {
    if (String(row.table).trim() === String(table) &&
        (row.status ?? "unpaid") === "unpaid" &&
        row.menu === menu) {
      qty += Number(row.qty || 1);
    }
  });
  if (qty <= 0) return;
  // ‡πÉ‡∏™‡πà‡πÅ‡∏ñ‡∏ß qty ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  await fetch(scriptURL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      table: table,
      menu: menu,
      price: 0,
      qty: -qty,
      status: "unpaid",
      note: "‡∏•‡∏ö‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
    })
  });
  setTimeout(loadAdminOrders, 900);
}

window.adminUpdateQty = async function(table, menu, newQty) {
  newQty = Math.max(1, Math.min(99, Number(newQty)));
  // ‡∏´‡∏≤ qty ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  let qty = 0;
  let price = 0;
  orderRaw.forEach(row => {
    if (String(row.table).trim() === String(table) &&
        (row.status ?? "unpaid") === "unpaid" &&
        row.menu === menu) {
      qty += Number(row.qty || 1);
      price = Number(row.price) || 0;
    }
  });
  if (qty === newQty) return;
  // ‡πÉ‡∏™‡πà‡πÅ‡∏ñ‡∏ß qty = newQty - oldQty
  const diff = newQty - qty;
  if (diff === 0) return;
  await fetch(scriptURL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      table: table,
      menu: menu,
      price: price,
      qty: diff,
      status: "unpaid",
      note: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
    })
  });
  setTimeout(loadAdminOrders, 900);
}

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏• = soft delete ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á (‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ)
window.adminCheckout = async function(table) {
  if (!confirm(`‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•‡πÇ‡∏ï‡πä‡∏∞ ${table} ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô?`)) return;

  // ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  // ‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å renderOrderTable (filter qty > 0 ‡πÅ‡∏•‡πâ‡∏ß)
  const orders = {};
  orderRaw.forEach(row => {
    if (String(row.table).trim() !== String(table)) return;
    if ((row.status ?? "unpaid") !== "unpaid") return;
    if (!row.menu) return;
    if (!orders[row.menu]) {
      orders[row.menu] = 0;
    }
    orders[row.menu] += Number(row.qty || 1);
  });

  // ‡πÉ‡∏™‡πà row ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ qty > 0)
  for (const [menu, qty] of Object.entries(orders)) {
    if (qty > 0) {
      await fetch(scriptURL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          table: table,
          menu: menu,
          price: 0,
          qty: -qty,
          status: "unpaid",
          note: "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•"
        })
      });
    }
  }
  document.getElementById('admin-result').innerHTML = "‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏¥‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
  setTimeout(()=>{document.getElementById('admin-result').innerHTML='';},2000);
  setTimeout(loadAdminOrders, 900);
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
loadAdminOrders();
